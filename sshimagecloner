#!/usr/bin/python3
'''ssh image cloner, to clone images from remote host over ssh'''

###############################################################################
##                             ssh image cloner                              ##
##                                                                           ##
## Python program to clone images from remote host over ssh                  ##
## Author: mikali-ri                                                         ##
## Created: 2021-11-01                                                       ##
## License: GNU General Public License v3                                    ##
##                                                                           ##
###############################################################################


###############################################################################
## Imports                                                                   ##
###############################################################################
import os
import sys
import codecs
import datetime
import getopt
import subprocess
import shlex
import yaml
from yaml.scanner import ScannerError



###############################################################################
## Own modules                                                               ##
###############################################################################
from helpers import Logger
from helpers import validator
from helpers.clonerclasses import Backup, ConfigFile, CmdlineArguments

###############################################################################
## My own custom classes                                                     ##
###############################################################################

#------------------------------------------------------------------------------
# Class for writing the logs, this handles the log levels etc.
#------------------------------------------------------------------------------
class LogWriter:
    '''A simple class to handle the verbosity and log writing'''

    def __init__(self, log_object, level, written, test):
        self.log = log_object
        self.log_level = level
        self.is_log_written = written
        if self.is_log_written and not test:
            with self.log.log_writer() as log_obj:
                log_obj.write_starting_row('Logging initiated, log level set to ' \
                     + str(self.log_level))


    def write(self, message, msgtype = 'N'):
        '''write a message to the log according to level etc.'''
        # if write_log is not set to True, do nothing.
        if not self.is_log_written:
            return

        if msgtype == 'E':
            with self.log.log_writer() as log_obj:
                log_obj.write_log(message, msgtype)
        elif msgtype == 'D' and self.log_level >= 2:
            with self.log.log_writer() as log_obj:
                log_obj.write_log(message, msgtype)
        elif msgtype == 'I' and self.log_level >= 1:
            with self.log.log_writer() as log_obj:
                log_obj.write_log(message, msgtype)
        elif msgtype == 'N':
            with self.log.log_writer() as log_obj:
                log_obj.write_log(message, msgtype)

        return


###############################################################################
## Constants                                                                 ##
###############################################################################

# config file is expected to be in the working directory
CONFIG_FILE_PATH = './sshimagecloner.yaml'


###############################################################################
## Main executable code                                                      ##
###############################################################################

def main(args):
    '''Main function to execute the code'''

    # TODO Fix all places where validator is called, so that the correct path is used.

    # Error count and message; used throughout the code.
    err_count = 0
    err_msg = ''

    # Parse and validate arguments (from command line), if any
    err_count, err_msg, cmdline_arguments = parse_cmdline_arguments(args)
    if err_count > 0:
        sys.exit(err_msg)

    # Read and parse the configuration file
    if cmdline_arguments.conf_file is None:
        v_r = validator.file_read(CONFIG_FILE_PATH)
        if v_r.result:
            err_count, err_msg, configuration, all_backups = parse_config_file(v_r.value)
        else:
            sys.exit(v_r.message)
    else:
        err_count, err_msg, configuration, all_backups = parse_config_file(
            cmdline_arguments.conf_file)

    # End execution if errors in parsing config file
    if err_count > 0:
        print('Errors in parsing the configuration file:\n')
        print(err_msg)
        sys.exit(1)

    # If run as configtest, end process here
    if cmdline_arguments.configtest:
        print('Config file content seems to be OK!')
        sys.exit(0)

    # Set up logging
    log = None
    my_log = None
    if cmdline_arguments.test:
        log = Logger(os.devnull, True)
        my_log = LogWriter(log, 0, True, True)
    else:
        log = Logger(configuration.log_file, cmdline_arguments.verbose)
        my_log = LogWriter(log, configuration.log_level, configuration.is_log_written, False)

    my_log.write('All arguments and parameters parsed successfully, found ' \
        + str(len(all_backups)) + ' backups from config file', 'D')

    my_log.write('Command line arguments are:', 'D')
    my_log.write(str(cmdline_arguments), 'D')
    my_log.write('Configuration parameters are:', 'D')
    my_log.write(str(configuration), 'D')
    my_log.write('Backups and parameters are:', 'D')
    my_log.write(str(all_backups), 'D')


    # Actual execution starts from here
    my_log.write('Start to execute backups', 'D')

    # Compare the command line arguments with config file backups
    backups_to_process = {}
    if len(cmdline_arguments.backup_names) > 0:
        err_count, err_msg, backups_to_process = select_for_processing(
            cmdline_arguments.backup_names,
            all_backups)
    else:
        backups_to_process = all_backups

    if err_count > 0:
        my_log.write(err_msg, 'E')
        print(err_msg)
        sys.exit(1)

    my_log.write(str(len(backups_to_process)) + ' backups to be processed', 'I')

    # If target_folder is given from command line, then replace it for all backups to be processed
    if cmdline_arguments.target_folder is not None:
        backups_to_process = replace_target_folder(
            backups_to_process,
            cmdline_arguments.target_folder)

    # Process through the selected backups
    for key, backup in backups_to_process.items():
        # Check if the backup-specific folder exists, if not create
        err_count, err_msg = check_and_create_folder(backup.target_folder,
            my_log,
            cmdline_arguments.test)
        if  err_count > 0:
            my_log.write(key + ': ' + err_msg, 'E')
            print(err_msg)
            sys.exit(1)

        # Run the backup
        err_count, err_msg = run_backup(backup, my_log, cmdline_arguments.test)
        if err_count > 0:
            my_log.write(key + ': ' + err_msg, 'E')
            print(err_msg)
            sys.exit(1)

        # Delete too old versions, if any
        if cmdline_arguments.delete_old_versions:
            err_count, err_msg = delete_old_versions(backup, my_log, cmdline_arguments.test)
            if err_count > 0:
                my_log.write('Error in deleting files ' + err_msg, 'E')
                print(err_msg)
                sys.exit((1))

    # End of def main(args)



def parse_cmdline_arguments(arg):
    '''Parse and validate command line arguments and return CmdArguments object'''

    usage = 'Usage: sshimagecloner [-h | --help] [-t | --test] [-v] \n' \
        + '[-c | --conffile configfile] [-f | --folder folder] \n' \
        + '[backupname_1] [backupname_2] [backupname...n]'

    err_count = 0
    err_msg = ''

    # Try to read the options and arguments from command line input
    try:
        opts, args = getopt.getopt(arg, 'htc:f:v', ['help', 'test', 'conffile=', 'folder='])
    except getopt.GetoptError:
        err_count += 1
        err_msg += '[ERROR] Could not parse command line options, possibly unrecognized option\n'
        err_msg += usage
        return err_count, err_msg, None

    # Check if asked for help, pring usage and exit
    for opt, val in opts:
        if opt in ('-h', '--help'):
            print(usage)
            sys.exit(0)

    # Process the options given.
    cmdargs = CmdlineArguments()

    for opt, val in opts:
        if opt == '-v':
            cmdargs.verbose = True
        elif opt in ('-c', '--conffile'):
            v_r = validator.file_read(val)
            if v_r.result:
                cmdargs.conf_file = v_r.value
            else:
                err_count +=1
                err_msg += v_r.message + '\n'
        elif opt in ('-f', '--folder'):
            # TODO remove the folder validation here, and move it to be done after the config
            # file has been read in. Check if the folder is absolute path, and if not, then
            # concatenate the backup_root before the folder.
            v_r = validator.folder_write(val)
            if v_r.result:
                cmdargs.target_folder = v_r.value
                cmdargs.delete_old_versions = True
            else:
                err_count +=1
                err_msg += v_r.message + '\n'
        elif opt in ('-t', '--test'):
            cmdargs.test = True
        else:
            err_count += 1
            err_msg += 'Unrecognized option'

    # Process the arguments given.
    for val in args:
        if val == 'configtest':
            cmdargs.configtest = True
        else:
            cmdargs.backup_names[val] = val

    return err_count, err_msg, cmdargs

    # End of def parse_cmd_arguments(arg)


def parse_config_file(path):
    '''Parse config file and return Configuration namedtuple object and backups -list'''
    msg = ''
    err_count = 0

    yaml_conf = {}

    # Try to read the config file, exit if it foes not work
    try:
        with codecs.open(path, 'r', 'utf-8') as config_file:
            yaml_conf = yaml.load(config_file, Loader=yaml.FullLoader)
    except ScannerError:
        sys.exit('ERROR! Configuration file could not be read in, check yaml syntax')


    # FIRST PARSE THE GENERAL CONFIGURATION
    general_config = {}
    if 'general' in yaml_conf:
        general_config = yaml_conf['general']
    else:
        err_count += 1
        msg += '[ERROR] general -section is missing from config file\n'

    e_c, e_m, general_config = read_generalconfig_section(general_config)

    err_count += e_c
    msg += e_m

    # THEN PARSE THE BACKUP DETAILS
    backup_config = {}
    if 'backups' in yaml_conf:
        backup_config = yaml_conf['backups']
    else:
        err_count += 1
        msg += '[ERROR] backups -section is missing from config file\n'


    if len(backup_config) == 0:
        err_count += 1
        msg += '[ERROR] No backups specified in config file\n'

    e_c, e_m, all_backups = read_backupconfig_section(backup_config, general_config.root_folder)

    err_count += e_c
    msg += e_m

    return err_count, msg, general_config, all_backups
    # End of def parse_config_file(path)


def read_generalconfig_section(general_config):
    '''Read the general section from the configuration file yaml dict'''

    conf = ConfigFile()
    err_count = 0
    msg = ''

    #Check through all the parameters needed.
    if 'log_file' in general_config:
        v_r = validator.file_write(general_config['log_file'])
        if v_r.result:
            conf.is_log_written = True
            conf.log_file = v_r.value
        else:
            err_count += 1
            msg += v_r.message + '\n'

    if 'log_level' in general_config:
        v_r = validator.log_level(general_config['log_level'])
        if v_r.result:
            conf.log_level = v_r.value
        else:
            err_count += 1
            msg += v_r.message + '\n'

    if 'backup_root_folder' in general_config:
        v_r = validator.folder_write(general_config['backup_root_folder'])
        if v_r.result:
            conf.root_folder = v_r.value
        else:
            err_count += 1
            msg += v_r.message + '\n'
    else:
        err_count += 1
        msg += '[ERROR] Parameter backup_root_folder not set in config file\n'

    return err_count, msg, conf

    # End of read_generalconfig_section(general_config)

def read_backupconfig_section(backup_config, root_folder):
    '''Read the backups section from the configuration yaml dict'''

    all_backups = {}
    err_count = 0
    msg = ''

    for key in backup_config:
        backup = Backup()

        v_r = validator.backup_name(key)
        if v_r.result:
            pass
        else:
            err_count += 1
            msg += v_r.message + '\n'

        backup.name = key

        try:
            v_r = validator.ip_address_or_host(backup_config[key]['remote_host'])
            if v_r.result:
                backup.remote_host = v_r.value
            else:
                err_count += 1
                msg += v_r.message + '\n'
        except KeyError:
            err_count += 1
            msg += '[ERROR] remote_host not specified for backup: ' + key + '\n'
        try:
            v_r = validator.remote_login(backup_config[key]['remote_login'])
            if v_r.result:
                backup.remote_login = v_r.value
            else:
                err_count += 1
                msg += v_r.message + '\n'
        except KeyError:
            if backup.remote_host == 'localhost':
                pass
            else:
                err_count += 1
                msg += '[ERROR] remote_login not specified for backup: ' + key + '\n'
        try:
            backup.remote_file = backup_config[key]['remote_file']
        except KeyError:
            err_count += 1
            msg += '[ERROR] remote_file not specified for backup: ' + key + '\n'
        try:
            v_r = validator.target_file(backup_config[key]['target_file'])
            if v_r.result:
                backup.target_file = v_r.value
            else:
                err_count += 1
                msg += v_r.message + '\n'
        except KeyError:
            err_count += 1
            msg += '[ERROR] target_file not specified for backup: ' + key + '\n'
        try:
            v_r = validator.versions(backup_config[key]['versions'])
            if v_r.result:
                backup.versions = v_r.value
            else:
                err_count += 1
                msg += v_r.message + '\n'
        except KeyError:
            pass


        backup.target_folder = root_folder + '/' + backup.name

        all_backups[backup.name] = backup


    return err_count, msg, all_backups
    # End of def read_backupconfig_section(backup_config)


def select_for_processing(cmdline_backups, all_backups):
    '''Select the backups to be processed based on cmdline arguments.'''
    err_count = 0
    err_msg = ''
    backups_to_process = {}
    for key in cmdline_backups:
        if key in all_backups.keys():
            backups_to_process[key] = all_backups[key]
        else:
            err_count += 1
            err_msg += 'Backup: ' + key + ' not found from config file, aborting\n'

    return err_count, err_msg, backups_to_process
    # Enf of def select_for_processing(cmdback, allback)


def replace_target_folder(backups, folder):
    '''Function to replace the target folder from config file with folder given from cmd line'''

    for key in backups.keys():
        backups[key].target_folder = folder + '/' + key

    return backups
    # End of def replace_target_folder(backups, folder)


def check_and_create_folder(backup_folder, log, test):
    '''Check the path for current backup, and create backup specific folder if it does not exist'''
    err_count = 0
    err_msg = ''

    # If path exists, validate it, if not, then try to create the folder
    if os.path.exists(backup_folder):
        v_r = validator.folder_write(backup_folder)
        if v_r.result:
            return 0, ''
        else:
            err_count += 1
            err_msg += v_r.message + '\n'
    else:
        try:
            log.write('Create the backup specific folder ' + backup_folder, 'D')
            log.write('mkdir ' + backup_folder, 'N')
            if not test:
                os.mkdir(backup_folder)
        except PermissionError:
            err_count += 1
            err_msg += 'Cannot create folder: ' + backup_folder + ', no access rights'
            return err_count, err_msg

    return err_count, err_msg

    # End of def prepare_path(root_path, folder, log, test)


def run_backup(backup, log, test):
    '''Function to process one backup'''
    err_count = 0
    err_msg = ''

    if backup.remote_host == 'localhost':
        err_count, err_msg = run_local_backup(backup, log, test)
    else:
        err_count, err_msg = run_remote_backup(backup, log, test)

    return err_count, err_msg
    # End of def def run_backup(backup, path, log, test)


def run_local_backup(backup, log, test):
    '''Function to process one backup from local machine'''
    err_count = 0
    err_msg = ''

    log.write('Starting to process localhost ' + backup.name + ' : ' + backup.remote_file, 'I')

    # Construct the read command
    #readcmd = '/usr/bin/sudo /usr/bin/dd if='+ backup.remote_file + ' bs=4M'

    #TEMPORARY READCOMMAND FOR TESTINT
    readcmd = '/usr/bin/sudo /usr/bin/dd if='+ backup.remote_file + ' bs=4M count=10'

    log.write(backup.name + ' read command:', 'D')
    log.write(readcmd, 'D')

    # Create the target filename, full path. ._tmp -extension is used during the write
    timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S_')
    target_file = backup.target_folder + '/' + timestamp + backup.target_file
    target_file_tmp = backup.target_folder + '/' + timestamp + backup.target_file + '._tmp'

    # Construct the write part of overall dd-command.
    gzipcmd = '/usr/bin/gzip -4'

    log.write(backup.name + ' gzip command:', 'D')
    log.write(gzipcmd, 'D')

    log.write('Full copy command:', 'D')
    log.write(readcmd + ' | ' + gzipcmd + ' > ' + target_file_tmp, 'N')

    # Split the command line options / process commands for subprocess.Popen command
    readsplit = shlex.split(readcmd)
    gzipsplit = shlex.split(gzipcmd)

    readproc = None
    gzipproc = None
    linestoprint = []
    if not test:
        try:
            outputfile = open(target_file_tmp, 'wb')
            # Start the process providing the read stream
            readproc = subprocess.Popen(readsplit,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)

            # Pipe the read streams output to write streams input
            gzipproc = subprocess.Popen(gzipsplit,
            stdin=readproc.stdout,
            stdout=outputfile,
            stderr=subprocess.PIPE)

            # Wait until the writing process finishes, and flush everything.
            gzipproc.wait()
            outputfile.flush()
            outputfile.close()

            linestoprint = readproc.stderr.readlines()
        except OSError as err:
            err_count += 1
            err_msg += 'Something went wrong with the read and write processes'
            print(err)
            return err_count, err_msg

    # Rename the target file to standard name.
    log.write('Renaming ' + target_file_tmp + ' to ' + target_file, 'D')
    log.write('mv ' + target_file_tmp + ' ' + target_file, 'N')
    if not test:
        os.rename(target_file_tmp, target_file)


    log.write(backup.name + ' : ' + backup.remote_file + ' successfully ' \
        + 'backed up as ' + target_file, 'I')

    log.write('with following dd statistics', 'D')
    for line in linestoprint:
        log.write(line.decode('utf-8'), 'D')


    return err_count, err_msg
    # End of def run_local_backup(backup, path, log, test)


def run_remote_backup(backup, log, test):
    '''Function to process one backup from a remote machine.'''
    err_count = 0
    err_msg = ''

    log.write('Starting to process remote host ' + backup.name + ' : ' + backup.remote_file, 'I')

    # Construct the "reading" part of the dd + gzip command
    readcmd = '/usr/bin/ssh ' + backup.remote_login + '@' + backup.remote_host \
        + ' "/usr/bin/sudo /usr/bin/dd if='+ backup.remote_file + ' bs=64k' \
        + ' | /usr/bin/gzip -4 -"'

    log.write(backup.name + ' read command:', 'D')
    log.write(readcmd, 'D')

    # Create the target filename, full path. ._tmp -extension is used during the write
    timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S_')
    target_file = backup.target_folder + '/' + timestamp + backup.target_file
    target_file_tmp = backup.target_folder + '/' + timestamp + backup.target_file + '._tmp'

    # Construct the write part of overall dd-command.
    writecmd = '/usr/bin/dd of=' + target_file_tmp + ' bs=64k'

    log.write(backup.name + ' write command:', 'D')
    log.write(writecmd, 'D')

    log.write('Full copy command;', 'D')
    log.write(readcmd + ' | ' + writecmd, 'N')

    # Split the command line options / process commands for subprocess.Popen command
    readsplit = shlex.split(readcmd)
    writesplit = shlex.split(writecmd)

    readproc = None
    writeproc = None
    linestoprint = []
    if not test:
        try:
            # Start the process providing the read stream
            readproc = subprocess.Popen(readsplit,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)

            # Pipe the read streams output to write streams input
            writeproc = subprocess.Popen(writesplit,
            stdin=readproc.stdout,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)

            # Wait until the writing process finishes, and flush everything.
            writeproc.wait()
            writeproc.stdout.flush()

            linestoprint = readproc.stderr.readlines() + writeproc.stderr.readlines()
        except OSError as err:
            err_count += 1
            err_msg += 'Something went wrong with the read and write processes'
            print(err)
            return err_count, err_msg

    # Rename the target file to standard name.
    log.write('Renaming ' + target_file_tmp + ' to ' + target_file, 'D')
    log.write('mv ' + target_file_tmp + ' ' + target_file, 'N')
    if not test:
        os.rename(target_file_tmp, target_file)


    log.write(backup.name + ' : ' + backup.remote_file + ' successfully ' \
        + 'backed up as ' + target_file, 'I')

    log.write('with following dd statistics', 'D')
    for line in linestoprint:
        log.write(line.decode('utf-8'), 'D')


    return err_count, err_msg

    # End of def run__remote_backup(backup, path, log, test)


def delete_old_versions(backup, log, test):
    '''Delete all older versions over versions count'''

    err_count = 0
    err_msg = ''

    log.write('Starting to delete old versions for ' + backup.name, 'D')
    backup_files = []
    dir_contents = os.listdir(backup.target_folder)
    # loop through all items, discard folders and only keep file matching the backup filename
    for item in dir_contents:
        fullpath = backup.target_folder + '/' + item
        if os.path.isfile(fullpath) and fullpath[-1*len(backup.target_file):] == backup.target_file:
            backup_files.append(fullpath)

    backup_files.sort(reverse=True)

    # Select files for deletion, where the index is larger than backup versions
    files_to_delete = backup_files[backup.versions:]

    log.write('There are ' + str(len(files_to_delete)) + ' files to be deleted in ' \
        + backup.target_folder, 'D')

    for file_to_delete in files_to_delete:
        log.write('Removing file: ' + file_to_delete, 'D')
        log.write('rm ' + file_to_delete, 'N')
        if not test:
            try:
                os.remove(file_to_delete)
            except PermissionError:
                err_count += 1
                err_msg += 'Can not remove file ' + file_to_delete + ' - Permission Error'

    return err_count, err_msg

    # End of def delete_old_versions(backup, log, test)


# Run the main function
if __name__ == '__main__':
    main(sys.argv[1:])
